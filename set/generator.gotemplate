package set

type {{.SetTypeName}} struct {
	backing map[{{.ElementTypeName}}]struct{}
}

func New{{.SetTypeName}}(initialElements ...{{.ElementTypeName}}) {{.SetTypeName}} {
	set := {{.SetTypeName}}{
		backing: make(map[{{.ElementTypeName}}]struct{}),
	}
	for _, x := range initialElements {
		set.Add(x)
	}
	return set
}

func (set {{.SetTypeName}}) Add(x {{.ElementTypeName}}) {
	set.backing[x] = struct{}{}
}

func (set {{.SetTypeName}}) Remove(x {{.ElementTypeName}}) {
	delete(set.backing, x)
}

func (set {{.SetTypeName}}) Contains(x {{.ElementTypeName}}) bool {
	_, ok := set.backing[x]
	return ok
}

func (set {{.SetTypeName}}) Comprises(vals ...{{.ElementTypeName}}) bool {
	if set.Count() != len(vals) {
		return false
	}
	for _, v := range vals {
		if !set.Contains(v) {
			return false
		}
	}
	return true
}

func (set {{.SetTypeName}}) Count() int {
	return len(set.backing)
}

func (set {{.SetTypeName}}) Elements() []{{.ElementTypeName}} {
	elm := make([]{{.ElementTypeName}}, 0, set.Count())
	for x, _ := range set.backing {
		elm = append(elm, x)
	}
	return elm
}

func (set {{.SetTypeName}}) Clear() {
	for x, _ := range set.backing {
		set.Remove(x)
	}
}

func (set {{.SetTypeName}}) Clone() {{.SetTypeName}} {
	result := New{{.SetTypeName}}()
	for x, _ := range set.backing {
		result.Add(x)
	}
	return result
}

// ------------------------------------------------------------

func (a {{.SetTypeName}}) Union(b {{.SetTypeName}}) {{.SetTypeName}} {
	result := a.Clone()
	for x, _ := range b.backing {
		result.Add(x)
	}
	return result
}

func (a {{.SetTypeName}}) Intersection(b {{.SetTypeName}}) {{.SetTypeName}} {
	result := New{{.SetTypeName}}()

	smaller, larger := a, b
	if a.Count() > b.Count() {
		smaller, larger = b, a
	}

	for x, _ := range smaller.backing {
		if larger.Contains(x) {
			result.Add(x)
		}
	}
	return result
}

func (a {{.SetTypeName}}) Difference(b {{.SetTypeName}}) {{.SetTypeName}} {
	result := a.Union(b)

	smaller, larger := a, b
	if a.Count() > b.Count() {
		smaller, larger = b, a
	}

	for x, _ := range smaller.backing {
		if larger.Contains(x) {
			result.Remove(x)
		}
	}
	return result
}

// Subtraction is non-commutative: a-b is different to b-a.
func (a {{.SetTypeName}}) Subtract(b {{.SetTypeName}}) {{.SetTypeName}} {
	result := a.Clone()
	for x, _ := range b.backing {
		result.Remove(x)
	}
	return result
}
